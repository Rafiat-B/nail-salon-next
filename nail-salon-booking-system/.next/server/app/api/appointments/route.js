(()=>{var e={};e.id=712,e.ids=[712],e.modules={6037:e=>{"use strict";e.exports=require("mongoose")},846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},8479:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>R,routeModule:()=>x,serverHooks:()=>v,workAsyncStorage:()=>w,workUnitAsyncStorage:()=>j});var n={};r.r(n),r.d(n,{DELETE:()=>f,GET:()=>m,POST:()=>g,PUT:()=>y});var o=r(2706),s=r(8203),a=r(5994),i=r(9187),p=r(8778),d=r(6037),u=r.n(d);let c=new d.Schema({user_id:{type:d.Schema.Types.ObjectId,ref:"User",required:!0},service_id:{type:d.Schema.Types.ObjectId,ref:"Service",required:!0},appointment_date:{type:Date,required:!0},status:{type:String,enum:["pending","confirmed","completed","cancelled"],default:"pending"},created_at:{type:Date,default:Date.now}});delete u().models.Appointment;let l=u().models.Appointment||u().model("Appointment",c,"Bookings");async function m(e){try{let t;await (0,p.A)();let r=e.headers.get("user-id");return console.log("GET Appointments - userId:",r),t=r?await l.find({user_id:r}):await l.find(),i.NextResponse.json(t,{status:200})}catch(e){return console.error("Error in GET /api/appointments:",e),i.NextResponse.json({error:"Failed to fetch appointments"},{status:500})}}async function g(e){try{await (0,p.A)();let{user_id:t,service_id:r,appointment_date:n,status:o}=await e.json();if(!t||!r||!n||(console.log("POST Create Booking - Received body:",{user_id:t,service_id:r,appointment_date:n,status:o}),!t||!r||!n))return i.NextResponse.json({error:"All fields are required"},{status:400});let s=new l({user_id:t,service_id:r,appointment_date:new Date(n),status:o||"pending"});return await s.save(),i.NextResponse.json({message:"Booking created successfully"},{status:201})}catch(e){return console.error("Error in POST /api/appointments:",e),i.NextResponse.json({error:"Server error"},{status:500})}}async function y(e){try{await (0,p.A)();let{id:t,status:r}=await e.json();if(console.log("PUT Update Booking - Received:",{id:t,status:r}),!["pending","confirmed","completed","cancelled"].includes(r))return i.NextResponse.json({error:"Invalid status value"},{status:400});let n=await l.findByIdAndUpdate(t,{status:r},{new:!0});if(!n)return i.NextResponse.json({error:"Booking not found"},{status:404});return i.NextResponse.json(n,{status:200})}catch(e){return console.error("Error in PUT /api/appointments:",e),i.NextResponse.json({error:"Failed to update booking"},{status:500})}}async function f(e){try{await (0,p.A)();let{id:t}=await e.json();if(console.log("DELETE Booking - Received ID:",t),!await l.findByIdAndDelete(t))return i.NextResponse.json({error:"Booking not found"},{status:404});return i.NextResponse.json({message:"Booking deleted successfully"},{status:200})}catch(e){return console.error("Error in DELETE /api/appointments:",e),i.NextResponse.json({error:"Failed to delete booking"},{status:500})}}let x=new o.AppRouteRouteModule({definition:{kind:s.RouteKind.APP_ROUTE,page:"/api/appointments/route",pathname:"/api/appointments",filename:"route",bundlePath:"app/api/appointments/route"},resolvedPagePath:"D:\\JUZT-OYIN\\nail-salon-next\\nail-salon-booking-system\\src\\app\\api\\appointments\\route.ts",nextConfigOutput:"",userland:n}),{workAsyncStorage:w,workUnitAsyncStorage:j,serverHooks:v}=x;function R(){return(0,a.patchFetch)({workAsyncStorage:w,workUnitAsyncStorage:j})}},6487:()=>{},8335:()=>{},8778:(e,t,r)=>{"use strict";r.d(t,{A:()=>s});var n=r(6037),o=r.n(n);let s=async()=>{if(o().connections[0].readyState){console.log("Already connected to MongoDB");return}try{await o().connect("mongodb+srv://admin:12345@clusterrb.d5mrm.mongodb.net/WDR?retryWrites=true&w=majority"),console.log("MONGODB_URI:","mongodb+srv://admin:12345@clusterrb.d5mrm.mongodb.net/WDR?retryWrites=true&w=majority"),console.log("MongoDB connected successfully")}catch(e){throw console.error("MongoDB connection error:",e),Error("Failed to connect to MongoDB")}}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),n=t.X(0,[638,452],()=>r(8479));module.exports=n})();