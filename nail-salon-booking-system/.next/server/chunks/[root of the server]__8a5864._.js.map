{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JUZT-OYIN/nail-salon-next/nail-salon-booking-system/src/models/User.ts"],"sourcesContent":["// models/User.ts\r\nimport mongoose, { Document } from 'mongoose';\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n  name: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true, match: /.+\\@.+\\..+/ }, // Email format validation\r\n  password: { type: String, required: true, minlength: 6 }, // Minimum password length\r\n  phone: { type: String, required: true, match: /^[0-9]{10}$/ }, // Ensure phone is exactly 10 digits\r\n  role: { type: String, enum: ['customer', 'admin'], required: true, default: 'customer' },\r\n});\r\n\r\ninterface IUser extends Document {\r\n  _id: string; // MongoDB ObjectId\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  phone: string;\r\n  role: 'customer' | 'admin';\r\n}\r\n\r\n\r\nconst User = mongoose.models.User || mongoose.model<IUser>('User', UserSchema);\r\nexport default User;\r\nexport type { IUser };"],"names":[],"mappings":"AAAA,iBAAiB;;;;AACjB;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;QAAM,OAAO;IAAa;IACzE,UAAU;QAAE,MAAM;QAAQ,UAAU;QAAM,WAAW;IAAE;IACvD,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,OAAO;IAAc;IAC5D,MAAM;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAY;SAAQ;QAAE,UAAU;QAAM,SAAS;IAAW;AACzF;AAYA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ;uCACpD"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JUZT-OYIN/nail-salon-next/nail-salon-booking-system/src/app/lib/dbConnect.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst dbConnect = async () => {\r\n  if (mongoose.connections[0].readyState) {\r\n    console.log('Already connected to MongoDB');\r\n    return;\r\n  }\r\n  try {\r\n    await mongoose.connect(process.env.MONGODB_URI!);\r\n    console.log(\"MONGODB_URI:\", process.env.MONGODB_URI);\r\n    console.log('MongoDB connected successfully');\r\n  } catch (error) {\r\n    console.error('MongoDB connection error:', error);\r\n    throw new Error('Failed to connect to MongoDB');\r\n  }\r\n};\r\n\r\nexport default dbConnect;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY;IAChB,IAAI,yGAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;QACtC,QAAQ,GAAG,CAAC;QACZ;IACF;IACA,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO;QACtB,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JUZT-OYIN/nail-salon-next/nail-salon-booking-system/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { serialize } from \"cookie\";\r\nimport User from \"@/models/User\";\r\nimport dbConnect from \"@/app/lib/dbConnect\";\r\n\r\nconst SECRET_KEY = process.env.JWT_SECRET || \"your_secret_key_here\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    await dbConnect();\r\n    const { email, password } = await req.json();\r\n    const normalizedEmail = email.toLowerCase();\r\n    if (!normalizedEmail || !password) {\r\n      return NextResponse.json({ error: \"Email and password are required\" }, { status: 400 });\r\n    }\r\n    if (!email || !password) {\r\n      return NextResponse.json({ error: \"Email and password are required\" }, { status: 400 });\r\n    }\r\n\r\n    const user = await User.findOne({ email: normalizedEmail });\r\n    if (!user) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return NextResponse.json({ error: \"Invalid credentials\" }, { status: 401 });\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      { _id: user._id.toString(), email: user.email.toLowerCase(), role: user.role, name: user.name, phone: user.phone },\r\n      SECRET_KEY,\r\n      { expiresIn: \"1h\" }\r\n    );\r\n    \r\n\r\n    const cookie = serialize(\"token\", token, {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === \"production\",\r\n      maxAge: 3600,\r\n      path: \"/\",\r\n    });\r\n\r\n    console.log(\"Login User ID:\", user._id.toString()); // Debug\r\n    return NextResponse.json(\r\n      {\r\n        message: \"Login successful\",\r\n        user: {\r\n          _id: user._id.toString(), // Ensure _id is a string\r\n          name: user.name,\r\n          email: user.email,\r\n          phone: user.phone,\r\n          role: user.role,\r\n        },\r\n      },\r\n      {\r\n        status: 200,\r\n        headers: { \"Set-Cookie\": cookie },\r\n      }\r\n    );\r\n  } catch (error) {\r\n    console.error(error);\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,CAAA,GAAA,gIAAA,CAAA,UAAS,AAAD;QACd,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAC1C,MAAM,kBAAkB,MAAM,WAAW;QACzC,IAAI,CAAC,mBAAmB,CAAC,UAAU;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QACvF;QACA,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QACvF;QAEA,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE,OAAO;QAAgB;QACzD,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAC5D,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACpB;YAAE,KAAK,KAAK,GAAG,CAAC,QAAQ;YAAI,OAAO,KAAK,KAAK,CAAC,WAAW;YAAI,MAAM,KAAK,IAAI;YAAE,MAAM,KAAK,IAAI;YAAE,OAAO,KAAK,KAAK;QAAC,GACjH,YACA;YAAE,WAAW;QAAK;QAIpB,MAAM,SAAS,CAAA,GAAA,yIAAA,CAAA,YAAS,AAAD,EAAE,SAAS,OAAO;YACvC,UAAU;YACV,QAAQ,oDAAyB;YACjC,QAAQ;YACR,MAAM;QACR;QAEA,QAAQ,GAAG,CAAC,kBAAkB,KAAK,GAAG,CAAC,QAAQ,KAAK,QAAQ;QAC5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,MAAM;gBACJ,KAAK,KAAK,GAAG,CAAC,QAAQ;gBACtB,MAAM,KAAK,IAAI;gBACf,OAAO,KAAK,KAAK;gBACjB,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;YACjB;QACF,GACA;YACE,QAAQ;YACR,SAAS;gBAAE,cAAc;YAAO;QAClC;IAEJ,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF"}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}