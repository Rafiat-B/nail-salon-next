{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JUZT-OYIN/nail-salon-next/nail-salon-booking-system/src/app/lib/dbConnect.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst dbConnect = async () => {\r\n  if (mongoose.connections[0].readyState) {\r\n    console.log('Already connected to MongoDB');\r\n    return;\r\n  }\r\n  try {\r\n    await mongoose.connect(process.env.MONGODB_URI!);\r\n    console.log(\"MONGODB_URI:\", process.env.MONGODB_URI);\r\n    console.log('MongoDB connected successfully');\r\n  } catch (error) {\r\n    console.error('MongoDB connection error:', error);\r\n    throw new Error('Failed to connect to MongoDB');\r\n  }\r\n};\r\n\r\nexport default dbConnect;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY;IAChB,IAAI,yGAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;QACtC,QAAQ,GAAG,CAAC;QACZ;IACF;IACA,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO;QACtB,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JUZT-OYIN/nail-salon-next/nail-salon-booking-system/src/models/Appointment.ts"],"sourcesContent":["import mongoose, { Schema, Document, Types } from \"mongoose\";\r\n\r\nexport interface IAppointment extends Document {\r\n  user_id: Types.ObjectId;\r\n  service_id: Types.ObjectId;\r\n  appointment_date: Date;\r\n  status: \"pending\" | \"confirmed\" | \"completed\" | \"cancelled\";\r\n  created_at: Date;\r\n}\r\n\r\nconst AppointmentSchema = new Schema<IAppointment>({\r\n  user_id: { type: Schema.Types.ObjectId, ref: 'User', required: true }, // ✅ ObjectId\r\n  service_id: { type: Schema.Types.ObjectId, ref: 'Service', required: true }, // ✅ ObjectId\r\n  appointment_date: { type: Date, required: true },\r\n  status: { type: String, enum: [\"pending\", \"confirmed\", \"completed\", \"cancelled\"], default: \"pending\" },\r\n  created_at: { type: Date, default: Date.now }\r\n});\r\n\r\n// ✅ Clear cached model\r\ndelete mongoose.models.Appointment;\r\n\r\nexport default mongoose.models.Appointment || mongoose.model<IAppointment>(\"Appointment\", AppointmentSchema, \"Bookings\");\r\n"],"names":[],"mappings":";;;AAAA;;AAUA,MAAM,oBAAoB,IAAI,yGAAA,CAAA,SAAM,CAAe;IACjD,SAAS;QAAE,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IACpE,YAAY;QAAE,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAW,UAAU;IAAK;IAC1E,kBAAkB;QAAE,MAAM;QAAM,UAAU;IAAK;IAC/C,QAAQ;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAW;YAAa;YAAa;SAAY;QAAE,SAAS;IAAU;IACrG,YAAY;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC9C;AAEA,uBAAuB;AACvB,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW;uCAEnB,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAe,eAAe,mBAAmB"}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file://D%3A/JUZT-OYIN/nail-salon-next/nail-salon-booking-system/src/app/api/appointments/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport dbConnect from \"@/app/lib/dbConnect\";\r\nimport Appointment from \"@/models/Appointment\";\r\n\r\n// ✅ GET All Bookings (optionally filter by user_id if passed as query param)\r\nexport async function GET(req: Request) {\r\n  try {\r\n    await dbConnect();\r\n    const userId = req.headers.get(\"user-id\");\r\n\r\n    console.log(\"GET Appointments - userId:\", userId);\r\n\r\n    let appointments;\r\n    if (userId) {\r\n      appointments = await Appointment.find({ user_id: userId });\r\n    } else {\r\n      appointments = await Appointment.find();\r\n    }\r\n\r\n    return NextResponse.json(appointments, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Error in GET /api/appointments:\", error);\r\n    return NextResponse.json({ error: \"Failed to fetch appointments\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ✅ POST Create a Booking\r\nexport async function POST(req: Request) {\r\n  try {\r\n    await dbConnect();\r\n    const { user_id, service_id, appointment_date, status } = await req.json();\r\n    if (!user_id || !service_id || !appointment_date) {\r\n      return NextResponse.json({ error: \"All fields are required\" }, { status: 400 });\r\n    }\r\n\r\n    console.log(\"POST Create Booking - Received body:\", { user_id, service_id, appointment_date, status });\r\n\r\n    if (!user_id || !service_id || !appointment_date) {\r\n      return NextResponse.json({ error: \"All fields are required\" }, { status: 400 });\r\n    }\r\n\r\n    const newBooking = new Appointment({\r\n      user_id,\r\n      service_id,\r\n      appointment_date: new Date(appointment_date),\r\n      status: status || \"pending\",\r\n    });\r\n\r\n    await newBooking.save();\r\n\r\n    return NextResponse.json({ message: \"Booking created successfully\" }, { status: 201 });\r\n  } catch (error) {\r\n    console.error(\"Error in POST /api/appointments:\", error);\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ✅ PUT Update Booking Status\r\nexport async function PUT(req: Request) {\r\n  try {\r\n    await dbConnect();\r\n    const { id, status } = await req.json();\r\n\r\n    console.log(\"PUT Update Booking - Received:\", { id, status });\r\n\r\n    if (![\"pending\", \"confirmed\", \"completed\", \"cancelled\"].includes(status)) {\r\n      return NextResponse.json({ error: \"Invalid status value\" }, { status: 400 });\r\n    }\r\n\r\n    const updatedBooking = await Appointment.findByIdAndUpdate(\r\n      id,\r\n      { status },\r\n      { new: true }\r\n    );\r\n\r\n    if (!updatedBooking) {\r\n      return NextResponse.json({ error: \"Booking not found\" }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json(updatedBooking, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Error in PUT /api/appointments:\", error);\r\n    return NextResponse.json({ error: \"Failed to update booking\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ✅ DELETE Booking\r\nexport async function DELETE(req: Request) {\r\n  try {\r\n    await dbConnect();\r\n    const { id } = await req.json();\r\n\r\n    console.log(\"DELETE Booking - Received ID:\", id);\r\n\r\n    const deletedBooking = await Appointment.findByIdAndDelete(id);\r\n\r\n    if (!deletedBooking) {\r\n      return NextResponse.json({ error: \"Booking not found\" }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json({ message: \"Booking deleted successfully\" }, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Error in DELETE /api/appointments:\", error);\r\n    return NextResponse.json({ error: \"Failed to delete booking\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}